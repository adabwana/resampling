
---
format:
  html: {toc: true, toc-depth: 4, theme: spacelab, output-file: assignment.sklearn.html}
highlight-style: solarized
code-block-background: true
include-in-header: {text: '<link rel = "icon" href = "data:," />'}
base-target-path: temp

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<script src="assignment.sklearn_files/md-default0.js" type="text/javascript"></script><script src="assignment.sklearn_files/md-default1.js" type="text/javascript"></script>

::: {.sourceClojure}
```clojure
(ns assignment.sklearn
  (:require
    [assignment.eda :refer [liver-disease]]
    [assignment.scicloj :refer [col-order]]
    [calc-metric.patch] ;eval from milliseconds to nanoseconds
    [fastmath.stats :as stats]
    [scicloj.ml.core :as ml]
    [scicloj.ml.dataset :as ds]
    [scicloj.ml.metamorph :as mm]
    [scicloj.sklearn-clj.ml]
    [utils.helpful-extracts
     :refer [best-models evaluate-pipe extract-params model->ds]]))
```
:::



# Clojure with Scikit Learn Algorithm
Define regressor and response


::: {.sourceClojure}
```clojure
(def response :drinks)
```
:::



::: {.sourceClojure}
```clojure
(def regressors
  (remove #(= response %) (ds/column-names liver-disease)))
```
:::



## Build pipelines


::: {.sourceClojure}
```clojure
(def pipeline-fn
  (ml/pipeline
    (mm/remove-column :selector)
    (mm/std-scale regressors {})
    (mm/set-inference-target response)))
```
:::


In scikit.learn's implementation of elastic net, it takes an alpha value, where $alpha = 0$ is a ridge regression model, $alpha = 1$ is a lasso regression model, and $0 < alpha < 1$ is strictly an elastic net model that combines the loss functions of both ridge and lasso regression models at differing strengths. Closer to 0 means ridge regression loss function has a heavier consideration and alpha closer to 1 meaning the lasso loss function has a heavier consideration. (This is in general, there is an optional l1-ratio parameter that will change the above interpretation.)


::: {.sourceClojure}
```clojure
(defn sklearn-pipe-fn [params]
  (ml/pipeline
    pipeline-fn
    {:metamorph/id :model}
    (mm/model (merge {:model-type     :sklearn.regression/elastic-net
                      :predict-proba? false}
                     params))))
```
:::



## Partition data


::: {.sourceClojure}
```clojure
(def ds-split                                               ;:split-names [:train-val :test]
  (ds/split->seq liver-disease :kfold {:seed 123 :k 5 :ratio [0.8 0.2]}))
```
:::



::: {.sourceClojure}
```clojure
(def train-val-splits
  (ds/split->seq
    (:train (first ds-split))
    :kfold {:seed 123 :k 5}))
```
:::



## Evaluate pipelines


::: {.sourceClojure}
```clojure
(def sklearn-pipelines
  (->>
    (ml/sobol-gridsearch {:alpha (ml/linear 0 1 250)})      ;doesnt like l1-ratio, why??
    (map sklearn-pipe-fn)))
```
:::



::: {.sourceClojure}
```clojure
(def evaluations-sklearn
  (ml/evaluate-pipelines
    sklearn-pipelines
    train-val-splits
    stats/omega-sq
    :accuracy
    {:other-metrices                   [{:name :mae :metric-fn ml/mae}
                                        {:name :rmse :metric-fn ml/rmse}]
     :return-best-pipeline-only        false
     :return-best-crossvalidation-only true}))
```
:::



## Extract models


::: {.sourceClojure}
```clojure
(def models-sklearn-vals
  (->> (best-models evaluations-sklearn)
       reverse))
```
:::



::: {.sourceClojure}
```clojure
(-> models-sklearn-vals first :metric)
```
:::



::: {.printedClojure}
```clojure
0.3641237206779405

```
:::



::: {.sourceClojure}
```clojure
(-> models-sklearn-vals first :params)
```
:::



::: {.printedClojure}
```clojure
{:model-type :sklearn.regression/elastic-net,
 :predict-proba? false,
 :alpha 1.0}

```
:::



::: {.sourceClojure}
```clojure
(-> models-sklearn-vals first :fit-ctx :model :model-data :attributes :intercept_)
```
:::



::: {.printedClojure}
```clojure
3.567873303167421

```
:::



::: {.sourceClojure}
```clojure
(-> models-sklearn-vals first :fit-ctx :model :model-data :attributes :coef_)
```
:::



::: {.printedClojure}
```clojure
[0.23816559 0.         0.         0.16579044 0.25591104]

```
:::



::: {.sourceClojure}
```clojure
(-> (model->ds models-sklearn-vals 5)
    (ds/reorder-columns col-order))
```
:::


_unnamed [5 7]:

|                     :model-type | :compute-time-ns |     :alpha |    :adj-r2 |       :mae |      :rmse | :predict-proba? |
|---------------------------------|-----------------:|-----------:|-----------:|-----------:|-----------:|-----------------|
| :sklearn.regression/elastic-net |          6331770 | 1.00000000 | 0.36412372 | 2.77538202 | 3.27570429 |           false |
| :sklearn.regression/elastic-net |          4065197 | 0.99598394 | 0.36409472 | 2.77449564 | 3.27469312 |           false |
| :sklearn.regression/elastic-net |          3652424 | 0.99196787 | 0.36406587 | 2.77360744 | 3.27368066 |           false |
| :sklearn.regression/elastic-net |          3245103 | 0.98795181 | 0.36403717 | 2.77271740 | 3.27266689 |           false |
| :sklearn.regression/elastic-net |          4218376 | 0.98393574 | 0.36400862 | 2.77182552 | 3.27165183 |           false |




::: {.sourceClojure}
```clojure
(-> (model->ds models-sklearn-vals 5)
    (ds/reorder-columns col-order)
    (ds/order-by :adj-r2 :desc))
```
:::


_unnamed [5 7]:

|                     :model-type | :compute-time-ns |     :alpha |    :adj-r2 |       :mae |      :rmse | :predict-proba? |
|---------------------------------|-----------------:|-----------:|-----------:|-----------:|-----------:|-----------------|
| :sklearn.regression/elastic-net |          6331770 | 1.00000000 | 0.36412372 | 2.77538202 | 3.27570429 |           false |
| :sklearn.regression/elastic-net |          4065197 | 0.99598394 | 0.36409472 | 2.77449564 | 3.27469312 |           false |
| :sklearn.regression/elastic-net |          3652424 | 0.99196787 | 0.36406587 | 2.77360744 | 3.27368066 |           false |
| :sklearn.regression/elastic-net |          3245103 | 0.98795181 | 0.36403717 | 2.77271740 | 3.27266689 |           false |
| :sklearn.regression/elastic-net |          4218376 | 0.98393574 | 0.36400862 | 2.77182552 | 3.27165183 |           false |




## Build final models for evaluation


::: {.sourceClojure}
```clojure
(def eval-sklearn
  (evaluate-pipe
    (->> (extract-params models-sklearn-vals 5)             ;use best 3 alphas
         (map sklearn-pipe-fn))
    ds-split))
```
:::



::: {.sourceClojure}
```clojure
(def models-sklearn
  (->> (best-models eval-sklearn)
       reverse))
```
:::



::: {.sourceClojure}
```clojure
(def top-sklearn
  (-> (model->ds models-sklearn 5)
      (ds/reorder-columns col-order)
      (ds/order-by :adj-r2 :desc)
      (ds/drop-columns :predict-proba?)))
```
:::



::: {.sourceClojure}
```clojure
top-sklearn
```
:::


_unnamed [5 6]:

|                     :model-type | :compute-time-ns |     :alpha |    :adj-r2 |       :mae |      :rmse |
|---------------------------------|-----------------:|-----------:|-----------:|-----------:|-----------:|
| :sklearn.regression/elastic-net |          3434387 | 0.98393574 | 0.26161668 | 2.30607905 | 3.04582307 |
| :sklearn.regression/elastic-net |          3545495 | 0.98795181 | 0.26159480 | 2.30679512 | 3.04693277 |
| :sklearn.regression/elastic-net |          3777292 | 0.99196787 | 0.26157229 | 2.30750974 | 3.04804261 |
| :sklearn.regression/elastic-net |          5455140 | 0.99598394 | 0.26154913 | 2.30822291 | 3.04915259 |
| :sklearn.regression/elastic-net |          4709301 | 1.00000000 | 0.26152532 | 2.30893464 | 3.05026269 |



<div style="background-color:grey;height:2px;width:100%;"></div>

<div><pre><small><small>source: <a href="https://github.com/adabwana/linear-regression/blob/master/src/assignment/sklearn.clj">src/assignment/sklearn.clj</a></small></small></pre></div>