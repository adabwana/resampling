[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Resampling, Selection, & Regularization",
    "section": "",
    "text": "(ns index)\n\n\n1 Assignment 3: Resampling, Selection, & Regularization\nInstructions:\n\nSelect a dataset suitable to regression at your discretion\nUsing built in functionality, apply the following algorithms to your data using 5 fold cross validation and RMSE:     Lasso Regression     Ridge Regression     * Linear or SGD Regression w/ KBestFeature Selection All final code should be in the main.py file. Modify the “README.md” file to include the following sections:     * Summary: Recap what was learned in class. This should be thorough enough that someone else could understand what the class was about  Questions (Answer these): What were the best hyperparameters for Lasso/Ridge Regression? Which features did Lasso/Ridge Regression choose? What was the optimal K in K Best Features Selection? Make sure that your README file is formatted properly and is visually appealing. It should be free of grammatical errors, punctuation errors, capitalization issues, etc. Sentences should be complete.\n\nWhat I did:\n\nSelected Boston Housing Prices. One of my favorite regression datsets to play around with and teach.\nLooked at the data with different transformations in mind. Standardizing and Tukey’s ladder transformation.\nImplemented regularization techniques–ridge and lasso–and created a best subset model of the 13 regressors.\nCompared fitting model to raw vs fitting model to Tukey tranformed data.\n\n\n\n\n\nsource: src/index.clj",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Assignment 3: Resampling, Selection, & Regularization</span>"
    ]
  },
  {
    "objectID": "assignment.eda.html",
    "href": "assignment.eda.html",
    "title": "2  Exploratory Data Analysis",
    "section": "",
    "text": "2.1 Raw",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "assignment.eda.html#raw",
    "href": "assignment.eda.html#raw",
    "title": "2  Exploratory Data Analysis",
    "section": "",
    "text": "2.1.1 Histograms\n\n^kind/vega\n(let [data (ds/rows boston :as-maps)\n      column-names (ds/column-names boston)]\n  {:data   {:values data}\n   :repeat {:column column-names}\n   :spec   {:mark     \"bar\"\n            :encoding {:x {:field {:repeat \"column\"} :type \"quantitative\"}\n                       :y {:aggregate \"count\"}}}})\n\n\n\n\n\n\n\n\n2.1.2 Box plots\n\n^kind/vega\n(let [data (ds/rows boston :as-maps)\n      column-names (ds/column-names boston)]\n  {:data   {:values data}\n   :repeat {:column column-names}\n   :spec   {:width    60 :mark \"boxplot\"\n            :encoding {:y {:field {:repeat \"column\"} :type \"quantitative\" :scale {:zero false}}}}})\n\n\n\n\n\n\n\n2.1.2.1 Outliers\n\n(let [columns (ds/column-names boston)]\n  (-&gt;&gt; (for [column columns]\n         (vector column (count (stats/outliers (get boston column)))))\n       (sort-by first)))\n\n\n([:age 0]\n [:b 76]\n [:chas 35]\n [:crim 66]\n [:dis 5]\n [:indus 0]\n [:lstat 6]\n [:medv 37]\n [:nox 0]\n [:ptratio 15]\n [:rad 0]\n [:rm 30]\n [:tax 0]\n [:zn 68])\n\n\n\n\n2.1.3 Pairs plot\n\n^kind/vega\n(let [data (ds/rows boston :as-maps)\n      column-names (ds/column-names boston)]\n  {:data   {:values data}\n   :repeat {:column column-names\n            :row    column-names}\n   :spec   {:height   100 :width 100\n            :mark     \"circle\"\n            :encoding {:x {:field {:repeat \"column\"} :type \"quantitative\" :scale {:zero false}}\n                       :y {:field {:repeat \"row\"} :type \"quantitative\" :scale {:zero false}}}}})\n\n\n\n\n\n\n\n(let [combos (combo/combinations regressors 2)]\n  (for [[x y] combos]\n    (assoc {} [x y] (stats/correlation (get boston x) (get boston y)))))\n\n\n({[:crim :zn] -0.20046921966254835}\n {[:crim :indus] 0.40658341140625986}\n {[:crim :chas] -0.0558915822222412}\n {[:crim :nox] 0.420971711392456}\n {[:crim :rm] -0.2192467028625141}\n {[:crim :age] 0.35273425090136357}\n {[:crim :dis] -0.3796700869510244}\n {[:crim :rad] 0.6255051452626016}\n {[:crim :tax] 0.5827643120325845}\n {[:crim :ptratio] 0.28994557927951986}\n {[:crim :b] -0.38506394199422395}\n {[:crim :lstat] 0.455621479447946}\n {[:zn :indus] -0.533828186304475}\n {[:zn :chas] -0.04269671929612136}\n {[:zn :nox] -0.5166037078279856}\n {[:zn :rm] 0.3119905873740921}\n {[:zn :age] -0.5695373420992128}\n {[:zn :dis] 0.6644082227621136}\n {[:zn :rad] -0.3119478260185376}\n {[:zn :tax] -0.31456332467760145}\n {[:zn :ptratio] -0.39167854793621854}\n {[:zn :b] 0.1755203173828281}\n {[:zn :lstat] -0.41299457452700544}\n {[:indus :chas] 0.06293802748966386}\n {[:indus :nox] 0.763651446920915}\n {[:indus :rm] -0.3916758526568436}\n {[:indus :age] 0.6447785113552554}\n {[:indus :dis] -0.7080269887427689}\n {[:indus :rad] 0.595129274603849}\n {[:indus :tax] 0.720760179951544}\n {[:indus :ptratio] 0.38324755642888625}\n {[:indus :b] -0.3569765351041923}\n {[:indus :lstat] 0.6037997164766225}\n {[:chas :nox] 0.09120280684249404}\n {[:chas :rm] 0.09125122504345609}\n {[:chas :age] 0.08651777425454238}\n {[:chas :dis] -0.09917578017472707}\n {[:chas :rad] -0.007368240886077562}\n {[:chas :tax] -0.035586517585911116}\n {[:chas :ptratio] -0.12151517365806137}\n {[:chas :b] 0.048788484955166224}\n {[:chas :lstat] -0.05392929837569404}\n {[:nox :rm] -0.30218818784959306}\n {[:nox :age] 0.7314701037859584}\n {[:nox :dis] -0.7692301132258255}\n {[:nox :rad] 0.6114405634855762}\n {[:nox :tax] 0.6680232004030203}\n {[:nox :ptratio] 0.18893267711276662}\n {[:nox :b] -0.3800506377923997}\n {[:nox :lstat] 0.5908789208808451}\n {[:rm :age] -0.24026493104775154}\n {[:rm :dis] 0.20524621293005493}\n {[:rm :rad] -0.209846667766109}\n {[:rm :tax] -0.29204783262321915}\n {[:rm :ptratio] -0.3555014945590849}\n {[:rm :b] 0.12806863509254304}\n {[:rm :lstat] -0.6138082718663951}\n {[:age :dis] -0.7478805408686319}\n {[:age :rad] 0.4560224517516138}\n {[:age :tax] 0.5064555935507052}\n {[:age :ptratio] 0.2615150116719574}\n {[:age :b] -0.27353397663851303}\n {[:age :lstat] 0.6023385287262405}\n {[:dis :rad] -0.4945879296720756}\n {[:dis :tax] -0.5344315844084555}\n {[:dis :ptratio] -0.23247054240825632}\n {[:dis :b] 0.29151167313303966}\n {[:dis :lstat] -0.49699583086368515}\n {[:rad :tax] 0.9102281885331837}\n {[:rad :ptratio] 0.4647411785030557}\n {[:rad :b] -0.4444128155751258}\n {[:rad :lstat] 0.4886763349750665}\n {[:tax :ptratio] 0.46085303506566544}\n {[:tax :b] -0.44180800672281295}\n {[:tax :lstat] 0.5439934120015688}\n {[:ptratio :b] -0.1773833023052315}\n {[:ptratio :lstat] 0.37404431671467575}\n {[:b :lstat] -0.36608690169159663})\n\n\n(for [[x y] (mapv (fn [r] [response r]) regressors)]\n  (assoc {} [x y] (stats/correlation (get boston x) (get boston y))))\n\n\n({[:medv :crim] -0.3883046085868113}\n {[:medv :zn] 0.36044534245054505}\n {[:medv :indus] -0.4837251600283735}\n {[:medv :chas] 0.17526017719029746}\n {[:medv :nox] -0.42732077237328153}\n {[:medv :rm] 0.6953599470715387}\n {[:medv :age] -0.376954565004596}\n {[:medv :dis] 0.2499287340859039}\n {[:medv :rad] -0.38162623063977785}\n {[:medv :tax] -0.4685359335677658}\n {[:medv :ptratio] -0.507786685537561}\n {[:medv :b] 0.3334608196570662}\n {[:medv :lstat] -0.7376627261740145})",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "assignment.eda.html#standardized",
    "href": "assignment.eda.html#standardized",
    "title": "2  Exploratory Data Analysis",
    "section": "2.2 Standardized",
    "text": "2.2 Standardized\n\n(defn standardize-column [dataset]\n  (reduce (fn [acc key]\n            (assoc acc key (stats/standardize (get dataset key))))\n          {}\n          (keys dataset)))\n\n\n(def boston-std\n  (-&gt; (standardize-column boston)\n      ds/dataset\n      (ds/add-columns {:chas (:chas boston)})\n                       ;:zn   (:zn boston)})\n      (ds/reorder-columns regressors response)))\n\n\n(ds/info boston-std)\n\n_unnamed: descriptive-stats [14 11]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:col-name\n:datatype\n:n-valid\n:n-missing\n:min\n:mean\n:max\n:standard-deviation\n:skew\n:first\n:last\n\n\n\n\n:crim\n:float64\n506\n0\n-0.41936693\n3.02020157E-16\n9.92410961\n1.00000000\n5.22314880\n-0.41936693\n-0.41458988\n\n\n:zn\n:float64\n506\n0\n-0.48724019\n-9.08364293E-16\n3.80047346\n1.00000000\n2.22566632\n0.28454827\n-0.48724019\n\n\n:indus\n:float64\n506\n0\n-1.55630166\n1.02410395E-15\n2.42017014\n1.00000000\n0.29502157\n-1.28663623\n0.11562398\n\n\n:chas\n:int16\n506\n0\n0.00000000\n6.91699605E-02\n1.00000000\n0.25399404\n3.40590417\n0.00000000\n0.00000000\n\n\n:nox\n:float64\n506\n0\n-1.46443272\n7.47535542E-16\n2.72964520\n1.00000000\n0.72930792\n-0.14407485\n0.15796779\n\n\n:rm\n:float64\n506\n0\n-3.87641323\n-1.01587601E-16\n3.55152964\n1.00000000\n0.40361213\n0.41326292\n-0.36240845\n\n\n:age\n:float64\n506\n0\n-2.33312816\n-1.64010220E-16\n1.11638970\n1.00000000\n-0.59896264\n-0.11989477\n0.43430172\n\n\n:dis\n:float64\n506\n0\n-1.26581653\n-1.07950539E-16\n3.95660220\n1.00000000\n1.01178058\n0.14007498\n-0.61264021\n\n\n:rad\n:float64\n506\n0\n-0.98187119\n-5.98335610E-16\n1.65960290\n1.00000000\n1.00481465\n-0.98187119\n-0.98187119\n\n\n:tax\n:float64\n506\n0\n-1.31269099\n-2.01727085E-15\n1.79641644\n1.00000000\n0.66995594\n-0.66594918\n-0.80241764\n\n\n:ptratio\n:float64\n506\n0\n-2.70470251\n1.21992886E-15\n1.63720813\n1.00000000\n-0.80232493\n-1.45755797\n1.17530274\n\n\n:b\n:float64\n506\n0\n-3.90333053\n5.07279769E-16\n0.44061589\n1.00000000\n-2.89037371\n0.44061589\n0.44061589\n\n\n:lstat\n:float64\n506\n0\n-1.52961338\n-6.86758511E-17\n3.54526238\n1.00000000\n0.90646009\n-1.07449897\n-0.66839688\n\n\n:medv\n:float64\n506\n0\n-1.90633988\n-1.44372876E-16\n2.98650460\n1.00000000\n1.10809841\n0.15952779\n-1.15610373\n\n\n\n\n2.2.1 Histogram\n\n^kind/vega\n(let [data (ds/rows boston-std :as-maps)\n      column-names (ds/column-names boston)]\n  {:data   {:values data}\n   :repeat {:column column-names}\n   :spec   {:mark     \"bar\"\n            :encoding {:x {:field {:repeat \"column\"} :type \"quantitative\"}\n                       :y {:aggregate \"count\"}}}})\n\n\n\n\n\n\n\n\n2.2.2 Box plots\n\n^kind/vega\n(let [data (ds/rows boston-std :as-maps)\n      column-names (ds/column-names boston)]\n  {:data   {:values data}\n   :repeat {:column column-names}\n   :spec   {:width    60 :mark \"boxplot\"\n            :encoding {:y {:field {:repeat \"column\"} :type \"quantitative\" :scale {:zero false}}}}})\n\n\n\n\n\n\n\n2.2.2.1 Outliers\n\n(let [columns (ds/column-names boston-std)]\n  (-&gt;&gt; (for [column columns]\n         (vector column (count (stats/outliers (get boston-std column)))))\n       (sort-by first)))\n\n\n([:age 0]\n [:b 76]\n [:chas 35]\n [:crim 66]\n [:dis 5]\n [:indus 0]\n [:lstat 6]\n [:medv 37]\n [:nox 0]\n [:ptratio 15]\n [:rad 0]\n [:rm 30]\n [:tax 0]\n [:zn 68])\n\n\n\n\n2.2.3 Pairs plot\n\n^kind/vega\n(let [data (ds/rows boston-std :as-maps)\n      column-names (ds/column-names boston-std)]\n  {:data   {:values data}\n   :repeat {:column column-names\n            :row    column-names}\n   :spec   {:height   100 :width 100\n            :mark     \"circle\"\n            :encoding {:x {:field {:repeat \"column\"} :type \"quantitative\" :scale {:zero false}}\n                       :y {:field {:repeat \"row\"} :type \"quantitative\" :scale {:zero false}}}}})\n\n\n\n\n\n\n\n(let [combos (combo/combinations regressors 2)]\n  (for [[x y] combos]\n    (assoc {} [x y] (stats/correlation (get boston-std x) (get boston-std y)))))\n\n\n({[:crim :zn] -0.20046921966254683}\n {[:crim :indus] 0.40658341140626064}\n {[:crim :chas] -0.055891582222241186}\n {[:crim :nox] 0.4209717113924561}\n {[:crim :rm] -0.21924670286251396}\n {[:crim :age] 0.35273425090136373}\n {[:crim :dis] -0.3796700869510246}\n {[:crim :rad] 0.6255051452626031}\n {[:crim :tax] 0.5827643120325842}\n {[:crim :ptratio] 0.28994557927951975}\n {[:crim :b] -0.3850639419942241}\n {[:crim :lstat] 0.4556214794479463}\n {[:zn :indus] -0.5338281863044668}\n {[:zn :chas] -0.04269671929612131}\n {[:zn :nox] -0.516603707827982}\n {[:zn :rm] 0.31199058737408947}\n {[:zn :age] -0.5695373420992095}\n {[:zn :dis] 0.6644082227621083}\n {[:zn :rad] -0.31194782601853516}\n {[:zn :tax] -0.3145633246775966}\n {[:zn :ptratio] -0.39167854793621293}\n {[:zn :b] 0.1755203173828273}\n {[:zn :lstat] -0.41299457452700256}\n {[:indus :chas] 0.0629380274896644}\n {[:indus :nox] 0.7636514469209154}\n {[:indus :rm] -0.3916758526568448}\n {[:indus :age] 0.6447785113552571}\n {[:indus :dis] -0.7080269887427696}\n {[:indus :rad] 0.5951292746038497}\n {[:indus :tax] 0.7207601799515443}\n {[:indus :ptratio] 0.3832475564288881}\n {[:indus :b] -0.35697653510419314}\n {[:indus :lstat] 0.6037997164766231}\n {[:chas :nox] 0.09120280684249471}\n {[:chas :rm] 0.09125122504345615}\n {[:chas :age] 0.0865177742545422}\n {[:chas :dis] -0.09917578017472727}\n {[:chas :rad] -0.007368240886077667}\n {[:chas :tax] -0.035586517585911255}\n {[:chas :ptratio] -0.12151517365806104}\n {[:chas :b] 0.048788484955166314}\n {[:chas :lstat] -0.05392929837569403}\n {[:nox :rm] -0.30218818784959417}\n {[:nox :age] 0.7314701037859582}\n {[:nox :dis] -0.7692301132258271}\n {[:nox :rad] 0.6114405634855784}\n {[:nox :tax] 0.6680232004030221}\n {[:nox :ptratio] 0.1889326771127674}\n {[:nox :b] -0.3800506377924003}\n {[:nox :lstat] 0.5908789208808459}\n {[:rm :age] -0.24026493104775165}\n {[:rm :dis] 0.205246212930055}\n {[:rm :rad] -0.20984666776610972}\n {[:rm :tax] -0.29204783262321976}\n {[:rm :ptratio] -0.35550149455908475}\n {[:rm :b] 0.12806863509254324}\n {[:rm :lstat] -0.6138082718663952}\n {[:age :dis] -0.7478805408686319}\n {[:age :rad] 0.4560224517516153}\n {[:age :tax] 0.506455593550705}\n {[:age :ptratio] 0.2615150116719573}\n {[:age :b] -0.273533976638513}\n {[:age :lstat] 0.60233852872624}\n {[:dis :rad] -0.4945879296720768}\n {[:dis :tax] -0.534431584408456}\n {[:dis :ptratio] -0.2324705424082561}\n {[:dis :b] 0.29151167313304}\n {[:dis :lstat] -0.4969958308636854}\n {[:rad :tax] 0.9102281885331902}\n {[:rad :ptratio] 0.46474117850305796}\n {[:rad :b] -0.44441281557512635}\n {[:rad :lstat] 0.488676334975068}\n {[:tax :ptratio] 0.4608530350656655}\n {[:tax :b] -0.44180800672281373}\n {[:tax :lstat] 0.5439934120015695}\n {[:ptratio :b] -0.17738330230523172}\n {[:ptratio :lstat] 0.37404431671467586}\n {[:b :lstat] -0.366086901691597})\n\n\n(for [[x y] (mapv (fn [r] [response r]) regressors)]\n  (assoc {} [x y] (stats/correlation (get boston-std x) (get boston-std y))))\n\n\n({[:medv :crim] -0.38830460858681176}\n {[:medv :zn] 0.36044534245054255}\n {[:medv :indus] -0.48372516002837435}\n {[:medv :chas] 0.1752601771902975}\n {[:medv :nox] -0.4273207723732826}\n {[:medv :rm] 0.695359947071539}\n {[:medv :age] -0.3769545650045961}\n {[:medv :dis] 0.24992873408590385}\n {[:medv :rad] -0.3816262306397786}\n {[:medv :tax] -0.4685359335677664}\n {[:medv :ptratio] -0.5077866855375611}\n {[:medv :b] 0.3334608196570666}\n {[:medv :lstat] -0.7376627261740148})",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "assignment.eda.html#tukeys-ladder-transformation",
    "href": "assignment.eda.html#tukeys-ladder-transformation",
    "title": "2  Exploratory Data Analysis",
    "section": "2.3 Tukey’s Ladder Transformation",
    "text": "2.3 Tukey’s Ladder Transformation\n\n(defn box-cox-transform [data lambda]\n  (map #(if (== lambda 0.0)\n          (Math/log %)\n          (/ (- (Math/pow (+ % 1) lambda) 1) lambda)) data))\n\n\n(defn skewness-diff [data lambda]\n  (let [transformed-data (box-cox-transform data lambda)]\n    (Math/abs (stats/skewness transformed-data))))\n\n\n(defn find-optimal-lambda [data start-lambda end-lambda step]\n  (let [lambdas (range start-lambda (+ end-lambda step) step)\n        skewnesses (map #(skewness-diff data %) lambdas)\n        paired (map vector lambdas skewnesses)\n        sorted (sort-by second paired)]\n    (first (first sorted))))\n\n\n(defn box-cox-optimal [data]\n  (let [optimal-lambda (find-optimal-lambda data -2 5 0.5)]\n    (box-cox-transform data optimal-lambda)))\n\n\n(defn apply-find-optimal-lambda [dataset]\n  (let [columns (keys dataset)]\n    (map vector columns\n         (map #(find-optimal-lambda (get dataset %) -2 5 0.5) columns))))\n\n\n(apply-find-optimal-lambda boston)\n\n\n([:crim -2]\n [:zn -2]\n [:indus 0.5]\n [:chas 3.0]\n [:nox -2]\n [:rm 0.5]\n [:age 2.5]\n [:dis -0.5]\n [:rad -0.5]\n [:tax -0.5]\n [:ptratio 5.0]\n [:b 5.0]\n [:lstat 0.0]\n [:medv 0.0])\n\n\n(defn apply-box-cox-to-dataset [dataset]\n  (reduce (fn [acc key]\n            (assoc acc key (box-cox-optimal (get dataset key))))\n          {}\n          (keys dataset)))\n\n\n(def boston-transformed\n  (-&gt; (apply-box-cox-to-dataset boston)\n      ds/dataset\n      (ds/add-columns {:chas (:chas boston)})\n      (ds/reorder-columns regressors response)))\n\n\n(ds/info boston-transformed)\n\n_unnamed: descriptive-stats [14 11]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:col-name\n:datatype\n:n-valid\n:n-missing\n:min\n:mean\n:max\n:standard-deviation\n:skew\n:first\n:last\n\n\n\n\n:crim\n:float64\n506\n0\n0.00626059\n2.45927040E-01\n4.99938239E-01\n1.85043280E-01\n0.27134793\n6.26058731E-03\n4.42396159E-02\n\n\n:zn\n:float64\n506\n0\n-0.00000000\n1.32229892E-01\n4.99950985E-01\n2.20535691E-01\n1.06917139\n4.98614958E-01\n-0.00000000E+00\n\n\n:indus\n:float64\n506\n0\n0.41660919\n4.66021654E+00\n8.72194012E+00\n2.04863970E+00\n-0.01752462\n1.63868108E+00\n5.19166184E+00\n\n\n:chas\n:int16\n506\n0\n0.00000000\n6.91699605E-02\n1.00000000E+00\n2.53994041E-01\n3.40590417\n0.00000000E+00\n0.00000000E+00\n\n\n:nox\n:float64\n506\n0\n0.23934236\n2.89865233E-01\n3.57169016E-01\n2.94150209E-02\n0.32351969\n2.88623193E-01\n2.97925013E-01\n\n\n:rm\n:float64\n506\n0\n2.27129957\n3.39178041E+00\n4.25459831E+00\n2.59566289E-01\n0.12229390\n3.50454358E+00\n3.30282943E+00\n\n\n:age\n:float64\n506\n0\n11.61493730\n2.08551747E+04\n4.10071125E+04\n1.45869423E+04\n-0.05103482\n1.42624057E+04\n2.42067271E+04\n\n\n:dis\n:float64\n506\n0\n0.62949389\n1.02557343E+00\n1.44797910E+00\n1.94335417E-01\n0.03813275\n1.11351559E+00\n9.31717819E-01\n\n\n:rad\n:float64\n506\n0\n0.58578644\n1.23565978E+00\n1.60000000E+00\n2.60225327E-01\n-0.14249984\n5.85786438E-01\n5.85786438E-01\n\n\n:tax\n:float64\n506\n0\n1.85413501\n1.89512400E+00\n1.92504683E+00\n1.99889787E-02\n0.09487930\n1.88394823E+00\n1.87917558E+00\n\n\n:ptratio\n:float64\n506\n0\n93051.54835200\n6.21378353E+05\n1.28726840E+06\n2.80727081E+05\n-0.15816450\n2.30127034E+05\n1.03072620E+06\n\n\n:b\n:float64\n506\n0\n0.60149285\n1.57854194E+12\n1.99480152E+12\n6.06075831E+11\n-1.67980129\n1.99480152E+12\n1.99480152E+12\n\n\n:lstat\n:float64\n506\n0\n0.54812141\n2.37096517E+00\n3.63679637E+00\n6.00891347E-01\n-0.32023236\n1.60542989E+00\n2.06432790E+00\n\n\n:medv\n:float64\n506\n0\n1.60943791\n3.03451287E+00\n3.91202301E+00\n4.08756850E-01\n-0.33032130\n3.17805383E+00\n2.47653840E+00\n\n\n\n\n2.3.1 Histogram\n\n^kind/vega\n(let [data (ds/rows boston-transformed :as-maps)\n      column-names (ds/column-names boston)]\n  {:data   {:values data}\n   :repeat {:column column-names}\n   :spec   {:mark     \"bar\"\n            :encoding {:x {:field {:repeat \"column\"} :type \"quantitative\"}\n                       :y {:aggregate \"count\"}}}})\n\n\n\n\n\n\n\n\n2.3.2 Box plots\n\n^kind/vega\n(let [data (ds/rows boston-transformed :as-maps)\n      column-names (ds/column-names boston)]\n  {:data   {:values data}\n   :repeat {:column column-names}\n   :spec   {:width    60 :mark \"boxplot\"\n            :encoding {:y {:field {:repeat \"column\"} :type \"quantitative\" :scale {:zero false}}}}})\n\n\n\n\n\n\n\n2.3.2.1 Outliers\n\n(let [columns (ds/column-names boston-transformed)]\n  (-&gt;&gt; (for [column columns]\n         (vector column (count (stats/outliers (get boston-transformed column)))))\n       (sort-by first)))\n\n\n([:age 0]\n [:b 67]\n [:chas 35]\n [:crim 0]\n [:dis 0]\n [:indus 0]\n [:lstat 1]\n [:medv 44]\n [:nox 0]\n [:ptratio 0]\n [:rad 0]\n [:rm 28]\n [:tax 0]\n [:zn 0])\n\n\n\n\n2.3.3 Pairs plot\n\n^kind/vega\n(let [data (ds/rows boston-transformed :as-maps)\n      column-names (ds/column-names boston-transformed)]\n  {:data   {:values data}\n   :repeat {:column column-names\n            :row    column-names}\n   :spec   {:height   100 :width 100\n            :mark     \"circle\"\n            :encoding {:x {:field {:repeat \"column\"} :type \"quantitative\" :scale {:zero false}}\n                       :y {:field {:repeat \"row\"} :type \"quantitative\" :scale {:zero false}}}}})\n\n\n\n\n\n\n\n(let [combos (combo/combinations regressors 2)]\n  (for [[x y] combos]\n    (assoc {} [x y] (stats/correlation (get boston-transformed x) (get boston-transformed y)))))\n\n\n({[:crim :zn] -0.5105641892076437}\n {[:crim :indus] 0.743010910817299}\n {[:crim :chas] 0.054150835555214834}\n {[:crim :nox] 0.8311402996331614}\n {[:crim :rm] -0.27847992735918314}\n {[:crim :age] 0.7015918271916508}\n {[:crim :dis] -0.7305004961179902}\n {[:crim :rad] 0.7680728328007305}\n {[:crim :tax] 0.7701082778321043}\n {[:crim :ptratio] 0.40666144159896234}\n {[:crim :b] -0.5183504671015879}\n {[:crim :lstat] 0.5474925478406114}\n {[:zn :indus] -0.6143250343664309}\n {[:zn :chas] -0.04003189748024347}\n {[:zn :nox] -0.5715139911211056}\n {[:zn :rm] 0.3249455295461817}\n {[:zn :age] -0.5210712235434612}\n {[:zn :dis] 0.6029262254163189}\n {[:zn :rad] -0.3250417154737229}\n {[:zn :tax] -0.3870515381451609}\n {[:zn :ptratio] -0.454487267993871}\n {[:zn :b] 0.25407750560207026}\n {[:zn :lstat] -0.45395969602198}\n {[:indus :chas] 0.0727317125575729}\n {[:indus :nox] 0.7835652166514265}\n {[:indus :rm] -0.4142985855828567}\n {[:indus :age] 0.6868895231366665}\n {[:indus :dis] -0.7615905027618245}\n {[:indus :rad] 0.5611816622736608}\n {[:indus :tax] 0.6890466202424106}\n {[:indus :ptratio] 0.44794754412995064}\n {[:indus :b] -0.41036752656422326}\n {[:indus :lstat] 0.6148435777111986}\n {[:chas :nox] 0.0813852845913243}\n {[:chas :rm] 0.08812425037209316}\n {[:chas :age] 0.07389099185556593}\n {[:chas :dis] -0.083847583069467}\n {[:chas :rad] 0.01999743519584064}\n {[:chas :tax] -0.03744155234144554}\n {[:chas :ptratio] -0.1325775015352095}\n {[:chas :b] 0.022082956805703446}\n {[:chas :lstat] -0.07407404910541232}\n {[:nox :rm] -0.3109657505922806}\n {[:nox :age] 0.785651042751661}\n {[:nox :dis] -0.8657286666848344}\n {[:nox :rad] 0.5958863092468799}\n {[:nox :tax] 0.6557264196985978}\n {[:nox :ptratio] 0.31668153029955065}\n {[:nox :b] -0.4300725790944919}\n {[:nox :lstat] 0.5935070355404587}\n {[:rm :age] -0.26837603514989583}\n {[:rm :dis] 0.2733638209446309}\n {[:rm :rad] -0.1989838269215972}\n {[:rm :tax] -0.30265060889326995}\n {[:rm :ptratio] -0.34224901707289446}\n {[:rm :b] 0.18082155644479542}\n {[:rm :lstat] -0.6605489881945913}\n {[:age :dis] -0.8001790973387969}\n {[:age :rad] 0.45282353561713423}\n {[:age :tax] 0.528536979991229}\n {[:age :ptratio] 0.339347666914494}\n {[:age :b] -0.34243782793026345}\n {[:age :lstat] 0.6116797051194823}\n {[:dis :rad] -0.525617896233155}\n {[:dis :tax] -0.5899094698886381}\n {[:dis :ptratio] -0.30254593122872236}\n {[:dis :b] 0.3690696817468582}\n {[:dis :lstat] -0.5281889332623918}\n {[:rad :tax] 0.7641410271406073}\n {[:rad :ptratio] 0.3960447147457996}\n {[:rad :b] -0.38686192234971584}\n {[:rad :lstat] 0.4216291870618736}\n {[:tax :ptratio] 0.4565123256537465}\n {[:tax :b] -0.44131954028092674}\n {[:tax :lstat] 0.5034118402479983}\n {[:ptratio :b] -0.17420580494139318}\n {[:ptratio :lstat] 0.44631216633682336}\n {[:b :lstat] -0.35768866699304963})\n\n\n(for [[x y] (mapv (fn [r] [response r]) regressors)]\n  (assoc {} [x y] (stats/correlation (get boston-transformed x) (get boston-transformed y))))\n\n\n({[:medv :crim] -0.4981925270028174}\n {[:medv :zn] 0.3913555887562702}\n {[:medv :indus] -0.5555513807589508}\n {[:medv :chas] 0.15841193932131697}\n {[:medv :nox] -0.5161113158028653}\n {[:medv :rm] 0.624388485108797}\n {[:medv :age] -0.4818999110098996}\n {[:medv :dis] 0.41369278110870245}\n {[:medv :rad] -0.40686632997350697}\n {[:medv :tax] -0.549153366152996}\n {[:medv :ptratio] -0.5177849500408633}\n {[:medv :b] 0.3745312472179234}\n {[:medv :lstat] -0.8229600313319908})\n\n\n\n\n\nsource: src/assignment/eda.clj",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "assignment.scicloj.html",
    "href": "assignment.scicloj.html",
    "title": "3  Clojure with Smile Algorithms",
    "section": "",
    "text": "3.1 Define regressors and response",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Clojure with Smile Algorithms</span>"
    ]
  },
  {
    "objectID": "assignment.scicloj.html#define-regressors-and-response",
    "href": "assignment.scicloj.html#define-regressors-and-response",
    "title": "3  Clojure with Smile Algorithms",
    "section": "",
    "text": "(def response :medv)\n\n\n(def regressors\n  (ds/column-names boston (complement #{response})))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Clojure with Smile Algorithms</span>"
    ]
  },
  {
    "objectID": "assignment.scicloj.html#convert-boston-column-types",
    "href": "assignment.scicloj.html#convert-boston-column-types",
    "title": "3  Clojure with Smile Algorithms",
    "section": "3.2 Convert Boston column types",
    "text": "3.2 Convert Boston column types\n\n(ds/info boston)\n\ndata/boston.csv: descriptive-stats [14 11]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:col-name\n:datatype\n:n-valid\n:n-missing\n:min\n:mean\n:max\n:standard-deviation\n:skew\n:first\n:last\n\n\n\n\n:crim\n:float64\n506\n0\n0.00632\n3.61352356\n88.9762\n8.60154511\n5.22314880\n0.00632\n0.04741\n\n\n:zn\n:float64\n506\n0\n0.00000\n11.36363636\n100.0000\n23.32245299\n2.22566632\n18.00000\n0.00000\n\n\n:indus\n:float64\n506\n0\n0.46000\n11.13677866\n27.7400\n6.86035294\n0.29502157\n2.31000\n11.93000\n\n\n:chas\n:int16\n506\n0\n0.00000\n0.06916996\n1.0000\n0.25399404\n3.40590417\n0.00000\n0.00000\n\n\n:nox\n:float64\n506\n0\n0.38500\n0.55469506\n0.8710\n0.11587768\n0.72930792\n0.53800\n0.57300\n\n\n:rm\n:float64\n506\n0\n3.56100\n6.28463439\n8.7800\n0.70261714\n0.40361213\n6.57500\n6.03000\n\n\n:age\n:float64\n506\n0\n2.90000\n68.57490119\n100.0000\n28.14886141\n-0.59896264\n65.20000\n80.80000\n\n\n:dis\n:float64\n506\n0\n1.12960\n3.79504269\n12.1265\n2.10571013\n1.01178058\n4.09000\n2.50500\n\n\n:rad\n:int16\n506\n0\n1.00000\n9.54940711\n24.0000\n8.70725938\n1.00481465\n1.00000\n1.00000\n\n\n:tax\n:float64\n506\n0\n187.00000\n408.23715415\n711.0000\n168.53711605\n0.66995594\n296.00000\n273.00000\n\n\n:ptratio\n:float64\n506\n0\n12.60000\n18.45553360\n22.0000\n2.16494552\n-0.80232493\n15.30000\n21.00000\n\n\n:b\n:float64\n506\n0\n0.32000\n356.67403162\n396.9000\n91.29486438\n-2.89037371\n396.90000\n396.90000\n\n\n:lstat\n:float64\n506\n0\n1.73000\n12.65306324\n37.9700\n7.14106151\n0.90646009\n4.98000\n7.88000\n\n\n:medv\n:float64\n506\n0\n5.00000\n22.53280632\n50.0000\n9.19710409\n1.10809841\n24.00000\n11.90000\n\n\n\nRight now, boston has too informative columns, viz. type :float64. Normally, I’d prefer to have more information per entry, however, trying to run this notebook without converting to :float32 breaks the JVM.\n\n(-&gt; boston\n    (ds/convert-types :type/float64 :float32)\n    ds/info)\n\ndata/boston.csv: descriptive-stats [14 11]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:col-name\n:datatype\n:n-valid\n:n-missing\n:min\n:mean\n:max\n:standard-deviation\n:skew\n:first\n:last\n\n\n\n\n:crim\n:float32\n506\n0\n0.00632000\n3.61352356\n88.97619629\n8.60154509\n5.22314872\n0.00632000\n0.04741000\n\n\n:zn\n:float32\n506\n0\n0.00000000\n11.36363636\n100.00000000\n23.32245299\n2.22566632\n18.00000000\n0.00000000\n\n\n:indus\n:float32\n506\n0\n0.46000001\n11.13677875\n27.73999977\n6.86035298\n0.29502153\n2.30999994\n11.93000031\n\n\n:chas\n:int16\n506\n0\n0.00000000\n0.06916996\n1.00000000\n0.25399404\n3.40590417\n0.00000000\n0.00000000\n\n\n:nox\n:float32\n506\n0\n0.38499999\n0.55469506\n0.87099999\n0.11587768\n0.72930787\n0.53799999\n0.57300001\n\n\n:rm\n:float32\n506\n0\n3.56100011\n6.28463439\n8.77999973\n0.70261715\n0.40361212\n6.57499981\n6.03000021\n\n\n:age\n:float32\n506\n0\n2.90000010\n68.57490120\n100.00000000\n28.14886153\n-0.59896263\n65.19999695\n80.80000305\n\n\n:dis\n:float32\n506\n0\n1.12960005\n3.79504270\n12.12650013\n2.10571014\n1.01178059\n4.09000015\n2.50500011\n\n\n:rad\n:int16\n506\n0\n1.00000000\n9.54940711\n24.00000000\n8.70725938\n1.00481465\n1.00000000\n1.00000000\n\n\n:tax\n:float32\n506\n0\n187.00000000\n408.23715415\n711.00000000\n168.53711605\n0.66995594\n296.00000000\n273.00000000\n\n\n:ptratio\n:float32\n506\n0\n12.60000038\n18.45553383\n22.00000000\n2.16494578\n-0.80232477\n15.30000019\n21.00000000\n\n\n:b\n:float32\n506\n0\n0.31999999\n356.67402960\n396.89999390\n91.29486340\n-2.89037375\n396.89999390\n396.89999390\n\n\n:lstat\n:float32\n506\n0\n1.73000002\n12.65306323\n37.97000122\n7.14106150\n0.90646009\n4.98000002\n7.88000011\n\n\n:medv\n:float32\n506\n0\n5.00000000\n22.53280636\n50.00000000\n9.19710411\n1.10809839\n24.00000000\n11.89999962\n\n\n\n\n(def boston-32\n  (-&gt; boston\n      (ds/convert-types :type/float64 :float32)))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Clojure with Smile Algorithms</span>"
    ]
  },
  {
    "objectID": "assignment.scicloj.html#setup-pipelines",
    "href": "assignment.scicloj.html#setup-pipelines",
    "title": "3  Clojure with Smile Algorithms",
    "section": "3.3 Setup Pipelines",
    "text": "3.3 Setup Pipelines\n\n(def pipeline-fn\n  (ml/pipeline\n    (mm/set-inference-target response)))\n\n\n3.3.1 Generic pipeline function\n\n(defn create-model-pipeline\n  [model-type params]\n  (ml/pipeline\n    pipeline-fn\n    {:metamorph/id :model}\n    (mm/model (merge {:model-type model-type} params))))\n\n\n3.3.1.1 Ridge context\n\n(defn ridge-pipe-fn\n  [params]\n  (create-model-pipeline :smile.regression/ridge params))\n\n\n\n3.3.1.2 Lasso context\n\n(defn lasso-pipe-fn\n  [params]\n  (create-model-pipeline :smile.regression/lasso params))\n\n\n\n3.3.1.3 Best-subset context\nBest subset has a different pattern/logic of pipelining. Whereas Ridge and Lasso have hyperparameters, the best subset algorithm, as I am implementing it, is nothing but ordinary least square models iterated over all combinations of regressors.\n\n(defn all-combinations [coll]\n  (letfn [(comb [coll]\n            (if (empty? coll)\n              [[]]\n              (let [rest (comb (rest coll))]\n                (concat rest (map #(cons (first coll) %) rest)))))]\n    (rest (comb coll))))\n\n\n(Math/pow 2 (count regressors))\n\n\n8192.0\n\nAbove, we see the number of combination possibilities with the number of regressors we have, 14. 2 to the power 13 is 8192. Below, we see the count of the all-combinations function on the list of regressors. The number is 2 to the power 13 minus 1. The difference of 1 is that I did not include a null model, i.e. no regressors.\n\n(count (all-combinations regressors))\n\n\n8191\n\n\n(defn best-subset-pipe-fn\n  [dataset y regrs]\n  (let [combinations (all-combinations regrs)]\n    (pmap (fn [Xs]                                          ; test `map` vs `pmap` vs `mapv`\n            (ml/pipeline\n              (mm/select-columns (cons y Xs))\n              (mm/set-inference-target y)\n              {:metamorph/id :model}\n              (mm/model {:model-type :smile.regression/ordinary-least-square})))\n          combinations)))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Clojure with Smile Algorithms</span>"
    ]
  },
  {
    "objectID": "assignment.scicloj.html#pipeline-functions",
    "href": "assignment.scicloj.html#pipeline-functions",
    "title": "3  Clojure with Smile Algorithms",
    "section": "3.4 Pipeline Functions",
    "text": "3.4 Pipeline Functions\n\n3.4.1 Evaluate pipeline\n\n(defn evaluate-pipe [pipe data]\n  (ml/evaluate-pipelines\n    pipe\n    data\n    stats/omega-sq\n    :accuracy\n    {:other-metrices                   [{:name :mae :metric-fn ml/mae}\n                                        {:name :rmse :metric-fn ml/rmse}]\n     :return-best-pipeline-only        false\n     :return-best-crossvalidation-only true}))\n\n\n\n3.4.2 Generate hyperparameters for models\n\n(defn generate-hyperparams [model-type]\n  (case model-type\n    :ridge (ml/sobol-gridsearch\n             (assoc-in (ml/hyperparameters :smile.regression/ridge) [:lambda :n-steps] 500))\n    :lasso (take 500 (ml/sobol-gridsearch (ml/hyperparameters :smile.regression/lasso)))))\n\n\n\n3.4.3 Evaluate a single model\n\n(defn evaluate-model [dataset split-fn model-type model-fn]\n  (let [data-split (split-fn dataset)\n        pipelines (cond\n                    (= model-type :best-subset)\n                    (model-fn dataset response regressors)\n                    :else (map model-fn (generate-hyperparams model-type)))]\n    (evaluate-pipe pipelines data-split)))\n\n\n\n3.4.4 Split functions\n\n(defn train-test [dataset]\n  (ds/split-&gt;seq dataset :bootstrap {:seed 123 :repeats 30}))\n\n\n(defn train-val [dataset]\n  (let [ds-split (train-test dataset)]\n    (ds/split-&gt;seq (:train (first ds-split)) :kfold {:seed 123 :k 5})))\n\n\n\n3.4.5 Define model types and corresponding functions as a vector of vectors\n\n(def model-type-fns\n  {:ridge ridge-pipe-fn\n   :lasso lasso-pipe-fn})\n\n\n\n3.4.6 Evaluate models for a dataset\n\n(defn evaluate-models [dataset split-fn]\n  (mapv (fn [[model-type model-fn]]\n          (evaluate-model dataset split-fn model-type model-fn))\n        model-type-fns))\n\n\n\n3.4.7 Evaluate separately\n\n(def ridge-lasso-models (evaluate-models boston-32 train-val))\n\n\n(comment\n  (def best-subset-model\n    (evaluate-model boston-32 train-val :best-subset best-subset-pipe-fn)))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Clojure with Smile Algorithms</span>"
    ]
  },
  {
    "objectID": "assignment.scicloj.html#extract-useable-models",
    "href": "assignment.scicloj.html#extract-useable-models",
    "title": "3  Clojure with Smile Algorithms",
    "section": "3.5 Extract Useable Models",
    "text": "3.5 Extract Useable Models\n\n(defn best-models [eval]\n  (-&gt;&gt; eval\n       flatten\n       (map\n         #(hash-map :summary (ml/thaw-model (get-in % [:fit-ctx :model]))\n                    :fit-ctx (:fit-ctx %)\n                    :timing-fit (:timing-fit %)\n                    :metric ((comp :metric :test-transform) %)\n                    :other-metrices ((comp :other-metrices :test-transform) %)\n                    :other-metric-1 ((comp :metric first) ((comp :other-metrices :test-transform) %))\n                    :other-metric-2 ((comp :metric second) ((comp :other-metrices :test-transform) %))\n                    :params ((comp :options :model :fit-ctx) %)\n                    :pipe-fn (:pipe-fn %)))\n       (sort-by :metric)))\n\n\n(def best-val-ridge\n  (-&gt; (first ridge-lasso-models)\n      best-models\n      reverse))\n\n\n(-&gt; best-val-ridge first :summary)\n\n\nLinear Model:\n\nResiduals:\n       Min          1Q      Median          3Q         Max\n  -13.6318     -2.9084     -1.2797      1.4830     27.6106\n\nCoefficients:\nIntercept          23.4641\ncrim               -0.0713\nzn                  0.0169\nindus              -0.0672\nchas                2.8096\nnox                -7.3539\nrm                  3.6681\nage                -0.0073\ndis                -0.7498\nrad                 0.0721\ntax                -0.0041\nptratio            -0.7041\nb                   0.0088\nlstat              -0.3975\n\nResidual standard error: 4.9576 on 392 degrees of freedom\nMultiple R-squared: 0.7074,    Adjusted R-squared: 0.6985\nF-statistic: 78.9944 on 13 and 392 DF,  p-value: 1.106e-96\n\n\n(-&gt; best-val-ridge first :metric)\n\n\n0.8173950200512978\n\n\n(-&gt; best-val-ridge first :other-metrices)\n\n\n({:name :mae,\n  :metric-fn\n  #object[scicloj.ml.core$mae 0x1f2c3690 \"scicloj.ml.core$mae@1f2c3690\"],\n  :metric 2.65714420138291}\n {:name :rmse,\n  :metric-fn\n  #object[scicloj.ml.core$rmse 0x6a325167 \"scicloj.ml.core$rmse@6a325167\"],\n  :metric 3.6179796771850925})\n\n\n(-&gt; best-val-ridge first :params)\n\n\n{:model-type :smile.regression/ridge, :lambda 100.2004997995992}\n\n\n(def best-val-lasso\n  (-&gt; (second ridge-lasso-models)\n      best-models\n      reverse))\n\n\n(-&gt; best-val-lasso first :summary)\n\n\nLinear Model:\n\nResiduals:\n       Min          1Q      Median          3Q         Max\n  -14.9960     -2.8211     -0.6650      1.5758     24.7895\n\nCoefficients:\nIntercept          36.2838\ncrim               -0.1133\nzn                  0.0323\nindus               0.0341\nchas                1.9610\nnox               -19.1848\nrm                  3.8042\nage                 0.0029\ndis                -1.4452\nrad                 0.3103\ntax                -0.0124\nptratio            -0.9352\nb                   0.0106\nlstat              -0.5243\n\nResidual standard error: 4.7062 on 392 degrees of freedom\nMultiple R-squared: 0.7364,    Adjusted R-squared: 0.7283\nF-statistic: 91.2444 on 13 and 392 DF,  p-value: 1.860e-105\n\n\n(-&gt; best-val-lasso first :metric)\n\n\n0.7956543000071373\n\n\n(-&gt; best-val-lasso first :other-metrices)\n\n\n({:name :mae,\n  :metric-fn\n  #object[scicloj.ml.core$mae 0x1f2c3690 \"scicloj.ml.core$mae@1f2c3690\"],\n  :metric 2.8223327247370036}\n {:name :rmse,\n  :metric-fn\n  #object[scicloj.ml.core$rmse 0x6a325167 \"scicloj.ml.core$rmse@6a325167\"],\n  :metric 3.683061864448507})\n\n\n(-&gt; best-val-lasso first :params)\n\n\n{:model-type :smile.regression/lasso,\n :lambda 10.0,\n :tolerance 1.0E-6,\n :max-iterations 3138181}\n\n\n(comment\n  (def best-val-subset\n    (-&gt; best-subset-model\n        best-models\n        reverse))\n\n  (-&gt; best-val-subset first :summary)\n    ;=&gt;\n    ;#object[smile.regression.LinearModel\n    ;        0x7a721884\n    ;        \"Linear Model:\n    ;\n    ;       Residuals:\n    ;              Min          1Q      Median          3Q         Max\n    ;         -18.3055     -3.3507     -0.9813      2.3172     31.4060\n    ;\n    ;       Coefficients:\n    ;                         Estimate Std. Error    t value   Pr(&gt;|t|)\n    ;       Intercept          -2.4171     4.7582    -0.5080     0.6118\n    ;       crim               -0.0852     0.0381    -2.2372     0.0258 *\n    ;       zn                 -0.0117     0.0161    -0.7239     0.4696\n    ;       chas                3.7276     1.1892     3.1345     0.0018 **\n    ;       rm                  6.5272     0.4104    15.9034     0.0000 ***\n    ;       age                -0.0486     0.0134    -3.6262     0.0003 ***\n    ;       ptratio            -0.9594     0.1583    -6.0608     0.0000 ***\n    ;       b                   0.0149     0.0033     4.4582     0.0000 ***\n    ;       ---------------------------------------------------------------------\n    ;       Significance codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n    ;\n    ;       Residual standard error: 5.6289 on 397 degrees of freedom\n    ;       Multiple R-squared: 0.6181,    Adjusted R-squared: 0.6113\n    ;       F-statistic: 91.7731 on 8 and 397 DF,  p-value: 5.506e-79\n    ;       \"])\n  (-&gt; best-val-subset first :metric)\n    ;=&gt; 0.8303967218087499)\n  (-&gt; best-val-subset first :other-metrices)\n    ;=&gt;\n    ;({:name :mae, :metric-fn #object[scicloj.ml.core$mae 0x798eacab \"scicloj.ml.core$mae@798eacab\"], :metric 2.770744533104}\n    ; {:name :rmse,\n    ;  :metric-fn #object[scicloj.ml.core$rmse 0x4350b8e7 \"scicloj.ml.core$rmse@4350b8e7\"],\n    ;  :metric 3.7412435449760975}))\n  (-&gt; best-val-subset first :fit-ctx :model :feature-columns)\n    ;=&gt; [:crim :zn :chas :rm :age :ptratio :b]\n\n  (def best-subset-regressors\n    (-&gt; best-val-subset first :fit-ctx :model :feature-columns)))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Clojure with Smile Algorithms</span>"
    ]
  },
  {
    "objectID": "assignment.scicloj.html#build-final-models-for-evaluation",
    "href": "assignment.scicloj.html#build-final-models-for-evaluation",
    "title": "3  Clojure with Smile Algorithms",
    "section": "3.6 Build final models for evaluation",
    "text": "3.6 Build final models for evaluation\n\n3.6.1 Ridge\n\n(def final-model-ridge\n  (-&gt; (evaluate-pipe\n        (map ridge-pipe-fn\n             (-&gt; best-val-ridge first :params))\n        (train-test boston-32))\n      last\n      best-models))\n\n\n(-&gt; final-model-ridge first :summary)\n\n\nLinear Model:\n\nResiduals:\n       Min          1Q      Median          3Q         Max\n  -10.6398     -2.6735     -0.7566      1.5185     26.5333\n\nCoefficients:\nIntercept          29.7249\ncrim               -0.1092\nzn                  0.0312\nindus              -0.0330\nchas                2.6792\nnox                -9.6526\nrm                  2.8383\nage                 0.0005\ndis                -0.8172\nrad                 0.1132\ntax                -0.0025\nptratio            -0.7403\nb                   0.0090\nlstat              -0.4848\n\nResidual standard error: 5.0037 on 493 degrees of freedom\nMultiple R-squared: 0.6779,    Adjusted R-squared: 0.6700\nF-statistic: 86.4592 on 13 and 493 DF,  p-value: 6.176e-113\n\n\n(-&gt; final-model-ridge first :metric)\n\n\n0.774634935015279\n\n\n(-&gt; final-model-ridge first :other-metrices)\n\n\n({:name :mae,\n  :metric-fn\n  #object[scicloj.ml.core$mae 0x1f2c3690 \"scicloj.ml.core$mae@1f2c3690\"],\n  :metric 3.2571196365539317}\n {:name :rmse,\n  :metric-fn\n  #object[scicloj.ml.core$rmse 0x6a325167 \"scicloj.ml.core$rmse@6a325167\"],\n  :metric 4.428692066973044})\n\n\n(-&gt; final-model-ridge first :params)\n\n\n{:model-type :smile.regression/ridge, :lambda 100.2004997995992}\n\n\n\n3.6.2 Lasso\n\n(def final-model-lasso\n  (-&gt; (evaluate-pipe\n        (map lasso-pipe-fn\n             (-&gt; best-val-lasso first :params))\n        (train-test boston-32))\n      last\n      best-models))\n\n\n(-&gt; final-model-lasso first :summary)\n\n\nLinear Model:\n\nResiduals:\n       Min          1Q      Median          3Q         Max\n  -10.6707     -2.6755     -0.3740      1.4763     23.6708\n\nCoefficients:\nIntercept          47.4587\ncrim               -0.1512\nzn                  0.0564\nindus               0.0563\nchas                2.2097\nnox               -21.7640\nrm                  2.2966\nage                 0.0170\ndis                -1.4559\nrad                 0.3811\ntax                -0.0124\nptratio            -0.9734\nb                   0.0092\nlstat              -0.6154\n\nResidual standard error: 4.7684 on 493 degrees of freedom\nMultiple R-squared: 0.7075,    Adjusted R-squared: 0.7004\nF-statistic: 99.3584 on 13 and 493 DF,  p-value: 3.708e-123\n\n\n(-&gt; final-model-lasso first :metric)\n\n\n0.760624548957392\n\n\n(-&gt; final-model-lasso first :other-metrices)\n\n\n({:name :mae,\n  :metric-fn\n  #object[scicloj.ml.core$mae 0x1f2c3690 \"scicloj.ml.core$mae@1f2c3690\"],\n  :metric 3.346427974017279}\n {:name :rmse,\n  :metric-fn\n  #object[scicloj.ml.core$rmse 0x6a325167 \"scicloj.ml.core$rmse@6a325167\"],\n  :metric 4.461146349347001})\n\n\n(-&gt; final-model-lasso first :params)\n\n\n{:model-type :smile.regression/lasso, :lambda 10.0}\n\n\n\n3.6.3 Best Subset\n\n(defn pipeline-best-subset-fn [y Xs]\n  (ml/pipeline\n    (mm/select-columns (cons y Xs))\n    (mm/set-inference-target y)))\n\n\n(defn ols-pipe-fn [y Xs]\n  (ml/pipeline\n    (pipeline-best-subset-fn y Xs)\n    {:metamorph/id :model}\n    (mm/model {:model-type :smile.regression/ordinary-least-square})))\n\n\n(comment\n  (def final-best-subset\n    (-&gt; (evaluate-pipe\n          [(ols-pipe-fn response best-subset-regressors)]\n          (train-test boston-32))\n        best-models))\n\n (-&gt; final-best-subset first :summary)\n   ;=&gt;\n   ;#object[smile.regression.LinearModel\n   ;        0x9334757\n   ;        \"Linear Model:\n   ;\n   ;         Residuals:\n   ;                Min          1Q      Median          3Q         Max\n   ;           -11.7343     -3.2668     -0.9311      1.8266     38.1650\n   ;\n   ;         Coefficients:\n   ;                           Estimate Std. Error    t value   Pr(&gt;|t|)\n   ;         Intercept          -2.6685     4.5855    -0.5819     0.5609\n   ;         crim               -0.1507     0.0337    -4.4762     0.0000 ***\n   ;         zn                  0.0059     0.0152     0.3913     0.6958\n   ;         chas                3.7895     1.2637     2.9989     0.0028 **\n   ;         rm                  5.9341     0.4373    13.5685     0.0000 ***\n   ;         age                -0.0350     0.0126    -2.7764     0.0057 **\n   ;         ptratio            -0.8448     0.1477    -5.7189     0.0000 ***\n   ;         b                   0.0168     0.0030     5.6008     0.0000 ***\n   ;         ---------------------------------------------------------------------\n   ;         Significance codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n   ;\n   ;         Residual standard error: 6.0676 on 498 degrees of freedom\n   ;         Multiple R-squared: 0.5215,    Adjusted R-squared: 0.5148\n   ;         F-statistic: 77.5462 on 8 and 498 DF,  p-value: 1.140e-75\n   ;         \"])\n (-&gt; final-best-subset first :metric)\n   ;=&gt; 0.7419895970972805)\n (-&gt; final-best-subset first :other-metrices)\n   ;=&gt;\n   ;({:name :mae,\n   ;  :metric-fn #object[scicloj.ml.core$mae 0x798eacab \"scicloj.ml.core$mae@798eacab\"],\n   ;  :metric 3.266730104211804}\n   ; {:name :rmse,\n   ;  :metric-fn #object[scicloj.ml.core$rmse 0x4350b8e7 \"scicloj.ml.core$rmse@4350b8e7\"],\n   ;  :metric 4.641450683867226}))\n (-&gt; final-best-subset first :fit-ctx :model :feature-columns))\n\n=&gt; [:crim :zn :chas :rm :age :ptratio :b])",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Clojure with Smile Algorithms</span>"
    ]
  },
  {
    "objectID": "assignment.scicloj.html#build-final-models-for-evaluation-1",
    "href": "assignment.scicloj.html#build-final-models-for-evaluation-1",
    "title": "3  Clojure with Smile Algorithms",
    "section": "4.1 Build final models for evaluation",
    "text": "4.1 Build final models for evaluation\n\n4.1.1 Ridge\n\n(def final-model-trans-ridge\n  (-&gt; (evaluate-pipe\n        (map ridge-pipe-fn\n             (-&gt; best-val-trans-ridge first :params))\n        (train-test boston-trans-32))\n      last\n      best-models))\n\n\n(-&gt; final-model-trans-ridge first :summary)\n\n\nLinear Model:\n\nResiduals:\n       Min          1Q      Median          3Q         Max\n   -0.9000     -0.1096      0.0155      0.1133      0.9480\n\nCoefficients:\nIntercept           8.5042\ncrim                0.0413\nzn                 -0.0190\nindus              -0.0010\nchas                0.1201\nnox                -1.4973\nrm                  0.1746\nage                -0.0000\ndis                -0.0697\nrad                 0.0624\ntax                -2.5175\nptratio            -0.0000\nb                   0.0000\nlstat              -0.3482\n\nResidual standard error: 0.2284 on 493 degrees of freedom\nMultiple R-squared: 0.6898,    Adjusted R-squared: 0.6823\nF-statistic: 91.3789 on 13 and 493 DF,  p-value: 5.981e-117\n\n\n(-&gt; final-model-trans-ridge first :metric)\n\n\n0.7931317852935841\n\n\n(-&gt; final-model-trans-ridge first :other-metrices)\n\n\n({:name :mae,\n  :metric-fn\n  #object[scicloj.ml.core$mae 0x1f2c3690 \"scicloj.ml.core$mae@1f2c3690\"],\n  :metric 0.13891291081695156}\n {:name :rmse,\n  :metric-fn\n  #object[scicloj.ml.core$rmse 0x6a325167 \"scicloj.ml.core$rmse@6a325167\"],\n  :metric 0.18699913565581375})\n\n\n\n4.1.2 Lasso\n\n(def final-model-trans-lasso\n  (-&gt; (evaluate-pipe\n        (map lasso-pipe-fn\n             (-&gt; best-val-trans-lasso first :params))\n        (train-test boston-trans-32))\n      last\n      best-models))\n\n\n(-&gt; final-model-trans-lasso first :summary)\n\n\nLinear Model:\n\nResiduals:\n       Min          1Q      Median          3Q         Max\n   -0.8486     -0.1196      0.0096      0.1225      0.8573\n\nCoefficients:\nIntercept          11.8059\ncrim                0.1365\nzn                 -0.0356\nindus               0.0110\nchas                0.0979\nnox                -2.7298\nrm                  0.0776\nage                 0.0000\ndis                -0.0934\nrad                 0.1471\ntax                -3.8350\nptratio            -0.0000\nb                   0.0000\nlstat              -0.4730\n\nResidual standard error: 0.2203 on 493 degrees of freedom\nMultiple R-squared: 0.7114,    Adjusted R-squared: 0.7044\nF-statistic: 101.2904 on 13 and 493 DF,  p-value: 1.314e-124\n\n\n(-&gt; final-model-trans-lasso first :metric)\n\n\n0.7806508779969971\n\n\n(-&gt; final-model-trans-lasso first :other-metrices)\n\n\n({:name :mae,\n  :metric-fn\n  #object[scicloj.ml.core$mae 0x1f2c3690 \"scicloj.ml.core$mae@1f2c3690\"],\n  :metric 0.14498282692619485}\n {:name :rmse,\n  :metric-fn\n  #object[scicloj.ml.core$rmse 0x6a325167 \"scicloj.ml.core$rmse@6a325167\"],\n  :metric 0.19074069330281707})\n\n\n\n\n\nsource: src/assignment/scicloj.clj",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Clojure with Smile Algorithms</span>"
    ]
  }
]